material {
    name : bloomDownsample,
    parameters : [
        {
            type : sampler2d,
            name : source,
            precision: medium
        },
        {
            type : float4,
            name : resolution,
            precision: high
        },
        {
            type : float,
            name : level
        }
    ],
    variables : [
        vertex
    ],
    domain : postprocess,
    depthWrite : false,
    depthCulling : false
}

vertex {
    void postProcessVertex(inout PostProcessVertexInputs postProcess) {
        postProcess.vertex.xy = postProcess.normalizedUV;
    }
}

fragment {
    vec3 Tonemap_Reinhard(const vec3 rgb, const float weight) {
        if (materialParams.level >= 1.0) {
            return rgb * weight;
        }
        // Weighted Reinhard tone-mapping operator designed for post-processing
        // This tone-mapping operator is invertible
        float luma = max3(rgb);
        float tonemap = (weight / (1.0 + luma));
        return rgb * tonemap;
    }

    vec3 Tonemap_Reinhard_Invert(const vec3 rgb) {
        if (materialParams.level >= 1.0) {
            return rgb;
        }
        // Inverse Reinhard tone-mapping operator, designed to be used in conjunction
        // with the weighted Reinhard tone-mapping operator
        float luma = max3(rgb);
        float tonemap = (1.0 / (1.0 - luma));
        return rgb * tonemap;
    }

    void postProcess(inout PostProcessInputs postProcess) {
        float lod = materialParams.level;
        highp vec2 uv = variable_vertex.xy;
        highp float du = materialParams.resolution.z;
        highp float dv = materialParams.resolution.w;

        vec3 c = textureLod(materialParams_source, uv, lod).rgb;

        vec3 l = textureLod(materialParams_source, uv + vec2(-du,  0.0), lod).rgb;
        vec3 t = textureLod(materialParams_source, uv + vec2( 0.0, -dv), lod).rgb;
        vec3 r = textureLod(materialParams_source, uv + vec2( du,  0.0), lod).rgb;
        vec3 b = textureLod(materialParams_source, uv + vec2( 0.0,  dv), lod).rgb;

        vec3 lt = textureLod(materialParams_source, uv + 0.5 * vec2(-du, -dv), lod).rgb;
        vec3 rt = textureLod(materialParams_source, uv + 0.5 * vec2( du, -dv), lod).rgb;
        vec3 rb = textureLod(materialParams_source, uv + 0.5 * vec2( du,  dv), lod).rgb;
        vec3 lb = textureLod(materialParams_source, uv + 0.5 * vec2(-du,  dv), lod).rgb;

        vec3 lt2 = textureLod(materialParams_source, uv + vec2(-du, -dv), lod).rgb;
        vec3 rt2 = textureLod(materialParams_source, uv + vec2( du, -dv), lod).rgb;
        vec3 rb2 = textureLod(materialParams_source, uv + vec2( du,  dv), lod).rgb;
        vec3 lb2 = textureLod(materialParams_source, uv + vec2(-du,  dv), lod).rgb;

        // four h4x4 boxes
        vec3 C2 = (lt + rt + rb +lb) * 0.25;
        vec3 LT2 = (c + l + t + lt2) * 0.25;
        vec3 RT2 = (c + r + t + rt2) * 0.25;
        vec3 RB2 = (c + r + b + rb2) * 0.25;
        vec3 LB2 = (c + l + b + lb2) * 0.25;

        // weighted average of the four boxes
        vec3 RGB = vec3(0.0);
        RGB += Tonemap_Reinhard(C2,  0.5);
        RGB += Tonemap_Reinhard(LT2, 0.125);
        RGB += Tonemap_Reinhard(RT2, 0.125);
        RGB += Tonemap_Reinhard(RB2, 0.125);
        RGB += Tonemap_Reinhard(LB2, 0.125);

        postProcess.color.rgb = Tonemap_Reinhard_Invert(RGB);
    }
}
